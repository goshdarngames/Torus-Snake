/****************************************************************************
 * createVRScene.js
 *
 * Used to create an empty babylon scene with the default VR experience.
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    /**
     * createVRSceme ( babylon, engine )
     *
     * Returns a Babylon scene with the default VR experience.     
     */
    babylonProject.createVRScene = function ( babylon, engine )
    {
        let scene = new babylon.Scene ( engine );

        scene.createDefaultEnvironment ();
        
        scene.createDefaultVRExperience ();

        return scene;
    };
} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * gameLoop.js
 *
 * This is the main game loop that is used to update objects and render
 * the scene.
 *
 * A finite state machine is used to switch between logical scenarios
 * such as the main menu or gameplay.
 *
 * The states are defined as functions that are to be executed each tick.
 *
 * The next function to be called to update the game's state is
 * stored as a function pointer in:
 *     
 *     babylonProject.nextUpdate;
 *
 * The game loop will call nextUpdate () and save its return as nextUpdate().
 *
 * The state functions are expected to wrap their data and execution in
 * an 'arrow operator' function pointer with any data they need and
 * return it so that calling nextUpdate () again will advance the state.
 *
 * The './pageLoaded.js' page loaded function sets the initial state to
 * 'babylonProject.StartState'.  This state can be found in the root
 * of the 'game_logic' directory and is a starting point for any game
 * using the base game as its template.
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    /**
     * babylonProject.nextUpdate
     *
     * This is expected to be a function pointer that can be called with
     * no paramters in order to advance the execution of the game by one
     * tick.
     *
     * The function should return a function pointer that can be called
     * with no paramters to execute the next tick.
     */
    babylonProject.nextUpdate = () => {};

    /**
     * babylonProject.gameLoop
     *
     * Calls babylonProject.nextUpdate () and saves its return in
     * babylonProject.nextUpdate.
     *
     * This should advance the game by one logic tick and save a function
     * pointer that can be called to execute the next tick.
     */
    babylonProject.gameLoop = function ()
    {
        //update state and store return value as next update
        babylonProject.nextUpdate = babylonProject.nextUpdate (); 
    }

} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * jQueryDomFunctions.js
 * 
 * Functions where the game interacts with the DOM are defined here.
 *
 * This function is outside the coverage of unit testing as it was 
 * awkward to mock jQuery and the DOM.
 *
 * Where possible it simply  passes DOM objects to a function within the
 * scope of tests.
 ***************************************************************************/

(function( babylonProject, $,  undefined )
{
    //Called when all HTML/DOM objects have been loaded.
    $(document).ready(function() 
    {
        babylonProject.pageLoaded ( document, BABYLON );
    });

    //Dynamically resizes the canvas as the browser window changes.
    // The babylon game engine is no longer available as a global var
    // if the resize function is needed in future it will have to be 
    // rewritten so that the engine instance is passed to it from the
    // pageloaded.js script
//    $(window).on("resize load", function()
//    {
//        if ( babylonProject.engine )
//        {
//            babylonProject.engine.resize();
//        }
//    });

} ( window.babylonProject = window.babylonProject || {},
    jQuery));

/****************************************************************************
 * pageLoaded.js
 *
 * The page loaded function is called by the jQueryDomFunctions.js 
 * module when the HTML Document is ready.
 *
 * This is the entry point into the game logic.  The game should be 
 * initialized and the first state of the finite state machine defined
 * in game_state/ should be loaded for the game loop to execute.
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    /**
     * pageLoaded ( documentRef, babylonRef )
     *
     * The first game logic function that is called when the
     * HTML page is ready.
     *
     * Sets the babylonProject.nextUpdate function pointer to be
     * babylonProject.startState
     *
     * Parameters:
     *  - documentRef: The HTML DOM object 'document'
     *  - babylonRef : A reference to the Babylon object
     */
    babylonProject.pageLoaded = function ( documentRef, babylonRef )
    {
        let canvas = documentRef.querySelector( "#renderCanvas" );

        let engine = babylonProject
            .createBabylonEngine ( babylonRef, canvas );

        //set the next update to be the startState function
        babylonProject.nextUpdate = () => 
                    babylonProject.startState( babylonRef, engine );

        engine.runRenderLoop ( babylonProject.gameLoop );
    };

    /**
     * createBabylonEngine ( babylonRef, canvas )
     *
     * The call to the constructor of the Babylon engine has been 
     * encapsulated within this factory method to enable mocking
     * of the engine object during testing.
     */
    babylonProject.createBabylonEngine = function ( babylonRef, canvas )
    {
        //check if canvas is undefined as it would create a silent error
        //if the engine was initialized without a valid canvas

        if ( canvas == null )
        {
            throw "Canvas is undefined.";
        }

        return new babylonRef.Engine ( canvas, true );
    };
} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * startState.js
 * 
 * The ./base_game/ functions define a gameLoop that expects a function
 * with no paramters each tick.
 *
 * On page load babylonProject.startState ( babylon, engine ) is set to be
 * called.
 *
 * When called it is expected to update the game state and return a 
 * function pointer that can be called with no parameters on the next
 * update.
 *
 * By default the startState will check if the scene paramter has been
 * provided and create one if not.  The function will update the state
 * and then use the javascript arrow notation to return a function
 * pointer that will call:
 *      babylonProject.startState ( babylon, engine, scene )
 *
 * See ./base_game/gameLoop.js for more information.
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    /**
     * babylonProject.startState ( babylon )
     *
     * Updates the game's state and returns a function that can be 
     * called with no paramters for the next update.
     */
    babylonProject.startState = function ( babylon, engine, scene )
    {
        if ( engine == undefined )
        {
            throw new Error ( "Engine is undefined." );
        }

        if ( babylon == undefined )
        {
            throw new Error ( "Babylon is undefined." );
        }

        if ( scene == undefined )
        {
            scene = babylonProject.createVRScene ( babylon, engine );
        
            let light = new  babylon.DirectionalLight (
                    "light", new babylon.Vector3 ( 0, 0.5, 1.0 ), scene  );

            light.position = new babylon.Vector3 ( 0, 5, -2 );

            return () => 
                babylonProject.startState ( 
                        babylon, engine, scene  );
        }

        scene.render ();

        return () => babylonProject.startState ( babylon, engine, scene );
    }; 

} ( window.babylonProject = window.babylonProject || {} ));
